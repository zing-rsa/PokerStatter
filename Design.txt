#  Verfied test case:
#9S 3S 24% -> 2% 
#AC JH 50% -> 79% 
#AD 9D 18% -> 13% 
#Split 8% -> 6% (chance nobody has hightest cards)
# flop 2D AH 6H

Latest approach:

broken down to one player, on one hand, looking for a one pair:
  find what hands he can get to win 
    loop hands
        one pair
          chance of the person getting a one pair * the chance of the opponent getting anything less than a competing one pair
            choose all the ways I can hit a one pair * all the ways I can pick without hitting anything else 
            *
            all the ways my opponent gets a one pair that is has lower values than mine * all the ways my opponent can pick without hitting anything else
            5h, 4s
            getAmountLeftOfValue 5h: 3, 4s: 3
            cardsLeftOver choose 3 * 
            
    
    






Required lists of cards:
    Table cards - 5 cards on the table
    Visible table cards - table cards that have been flipped over
    Player cards - 2 cards that a player has in their hand
    playable cards - all visible table cards + 2 cards in a players hand
    Audience Visible cards - visible table cards + all the player cards
    invisibleCards - all cards that no one can see

Entities:

    pokerStatter
        Props:
        ?

        methods:
            getAllPlayersChanceOfWinning
                - params 
                    GameState
                - returns 
                    list of players and their percent chance of winning

            getIndvPlayerChanceOfWinning?

            cardMatcher
                idea - retrieve the amount of a specific card type are left in the deck. 
                params
                    - suit - Suits Enum - nullable
                    - Kicker - number - nullable
                returns 
                    - number of cards that exist in non-visible deck that match the params given
    
            cardsRequiredToHit:
                idea - generate a list of cards required to make up each of the possible comibinations
                params:
                    playerCards - List of the two cards that the player has in their hand
                    visibleTableCards - list of visible table cards

            chanceOfHitting:
                idea - use output from cardmatcher to detemerine the chance of getting the card(s) you need to hit each of the possible hands.
                params:
                    playerCards - List of the two cards that the player has in their hand
                    visibleTableCards - list of visible table cards

    
    gameState: (Table?)
        Props:
            Deck - deck of 52 cards

            players - list of players
            playerCount - nt count

            tableCards
            visibleTableCards
            audienceVisibleCards
            invisibleCards

    gameStateUtil:(Dealer?)
        props:
            currentGameState

        Methods:
            generateDeck:
                method to populate the deck with 52 cards
            dealCards:
                - params:
                    playerCount
                - approach:
                    - choose 3 cards at random from the deck a place them in the first 3 table card slots
                    - burn a card
                    - choose another random card 
                    - burn a card
                    - choose another random card 
            flipCard:
                decide cards to flip
                    if no cards flipped, flip the flop
                    if 3 cards, flip turn
                    if 4 cards, flip river
            setTableCards:
                allow table cards to be seeded
            setPlayerCards:
                params:
                    - playerId
                    - list of cards
            addPlayer:
                create a new player and add him to the player array with empty card array
            

    card
        props:
            Id
            suit
            value
        methods:
            getName:
                return a formatted version of card using the value and suit
    player
        Id
        cards

    cardMatcher?

    tableCard? (vs card?)
        Id
        suit
        Value
        visible







BrainDUMP::

Methods and lists:
    cardMatcher
        idea - retrieve the amount of a specific card type are left in the deck. 
        params
            - suit - Suits Enum - nullable
            - Kicker - number - nullable
        returns 
            - number of cards that exist in non-visible deck that match the params given
    
    cardsRequiredForHand
        idea - generate a list of cards required to make up each of the possible comibinations
        params:
            playerCards - List of the two cards that the player has in their hand
            visibleTableCards - list of visible table cards
        returns:
            list of required cards to hit each combination

    chanceOfHitting:
        idea - use output from cardmatcher and cardsREquiredForHand to detemerine the chance of getting the card(s) you need to hit each of the possible comibinations.
        params:
            playerCards - List of the two cards that the player has in their hand
            visibleTableCards - list of visible table cards
        returns:
            list of comibinations with respective chance of winning them

    chanceOfWinning:
        idea - generate a list of players with assigned percent chances of winning

    decideHigher:
        idea - if two players have the same hand, decide which one is higher by checking the kicker values of their hands


Structures, storage/harcode:

    Kicker Enum:
        Conversion from numeric to name :
            1 - Ace
            2 - Duce
            3 - 3
            4 - 4
            11 - Jack
            etc..
    Suits Enum:
        - Hearts
        - Clubs
        - Spades
        - Diamonds
    Combinations Enum:??
        - 1 pair
        - 2 pair
        ...
        - Royal flush
    handRanks
        - list of hands with associated ranks
        - use combinations enum?
        - dict? key - "1 pair"(name) value - 1(rank)
            eg. high kicker - 1 
                1 pair      - 2
                2 pair      - 3
             
    deck
        The deck of all 52 cards
        Dict ?
            key - Id
            value - Card object
    




Start on second betting round - ie. after flop. Necessary? (Don't think so with below approach)

Game design approach:
    Create a dict of all 52 cards. Necessary? 
    Create a list of all 52 cards? 

    With key of Id from 1 to 52
    Order of:
        13 - Hearts
        13 - Clubs
        13 - Diamonds
        13 - Spades
    
    Randomly decide which cards have been selected for the round.
        5 + 2n will be the amount of cards in play where n is the amount of players
    Design system that can create scenarios by selecting which cards will appear

    Store player cards(2 in hand) in array inside player object
    Store table cards(5 on table) in list of cards, with flag to set visible or not
    Store all audience visible cards((tablecards.getVisibleCardCount)+2n) in a list
    Store all unseen cards in a list
        Create card matcher which can retrieve the amount of a specific card type are left in the deck. 
        - takes in suit, takes in value, takes in suit and value, takes in niether
        - returns amount of cards that match the "pattern"
            How many diamonds? 
                Amount of diamonds in total(13) - visibe card count diamonds(eg. 1) = 12
                    probability of getting a diamond on next card is 12/(52-(visibleCardCount))  
            How many 4s? 
                amount of 4s in total(4) - visible card count 4s(eg2) = 2
                    probability of getting a 4 on next card is 2/(52-(visibleCardCount))  



Overall approach:
 
    Dealer generates deck
    Dealer deals cards
    determine probs of winning
        Loop through each player
        Create list of playable cards from that player (cards a player can see)   
        Get all "invisible" cards
        Go through everything you could hit wit your visible cards(ie. all possible hands(flush,straight,etc)) and find out what cards you would need to hit those
            This would already iron out a couple hands that are impossible to hit
            It would also show things you have already hit because it should display 0 required cards if you have already hit something
        Go through each of the entries in the list that contain the possible things you can hit
        Decide the probablity of you getting each card out of the remaining invisible table cards + yours and output a total probability of you hitting each comibination
            (if you have already hit it, it should show 100%)
        Get the probablity of you hitting the highest ranked possible combiniation in your hand and compare that to the other players 
    flip card (flop)
    determind probs of winning
    flip card (turn)
    determine probs of winning
    flip card (river)
    determine winner




Approach to determine probability of winning hand:



    Loop through each player
        Create list of playable cards from that player (cards a player can see)   
        Get all "invisible" cards
        Go through everything you could hit wit your visible cards(ie. all possible hands(flush,straight,etc)) and find out what cards you would need to hit those
            This would already iron out a couple hands that are impossible to hit
            It would also show things you have already hit because it should display 0 required cards if you have already hit something
        Go through each of the entries in the list that contain the possible things you can hit
        Decide the probablity of you getting each card out of the remaining invisible table cards + yours and output a total probability of you hitting each comibination
            (if you have already hit it, it should show 100%)
        Get the probablity of you hitting the highest ranked possible combiniation in your hand and compare that to the other players 
        
        







    Loop through each player
        Need player object 
            index
            list of cards
        Create list of playable cards from that player (cards a player can see)   
        Fetch cards
        Decide what is possible to hit
            ie. figure out if straight is possible, figure out if flush is possible, etc. etc.
            How to store what patterns are required to get a flush, straight, etc??
                Create a list of visible cards
                Add player cards, then add table cards as they become availible
                Create methods to check for each of the possiblilites
                    methods take in array of visible cards to each player
                    method to generate required cards to hit something
                     - output a list of cards
                        required cards for one pair: 
                            loop cards
                                first card
                                check for amount of that card is in playable cards(ie. cards player can see)
                                    if none:
                                        add to required cards
                                    if one: 
                                        move to next player card
                        required cards for 2 pair:
                            loop cards
                                first card
                                check for amount of that card is in playable cards(ie. cards player can see)
                                    if none:
                                        add to required cards
                                    if one: 
                                        move to next player card
                                check for amount of that card is in playable cards(ie. cards player can see)
                                    if none:
                                        add to required cards
                                    if one: 
                                        move to next player card

        Method to generate probability of getting the required cards in all ways:
        - output list of probabilities of hitting each match
            method to check one pair
                loop through each player card, retrieve amount of the required card is lef tin the deck from card matcher
            method to check two pair
                loop through each card, check prob of getting each card, in each of the sequences
            method to check triples
                loop through each card, check 
            method to check quads
            method to check straights
            method to check flushes
                build into this method to check for royal? 
            method to check fullhouse
                
Future Plans:

Create a method that can determine the higher of two hands
eg if two people have a straight, who wins. 
Make it dynamic so we can use it across all hands, including winning by high cards

PokerStater methods pattern:

    genChanceperplayer - return a list with the chance that each player has of winning a hand
                       - called once per hand

    More to come here

    gethandsToCheck - return a list of hands filtered on whether they can win/are relevant
    getPossibleHands - return a list of all possible hands
    getHandChances - return a list of possibe hands with the total chances of each occuring built from ChanceOfX of each hand
    ChanceOfX - return total chance as it stands of getting the cards returned from getXCards
    getXCards - return list of cards required to get X

P1
5h 9c

P2
3S KD

Table
Ah Qh 3D

"flush"

onepair:
twopair:
flush:
etc..

onepair+twopair+flush:





[flush - 25%
outcards = [
    a
    b
    c
    d
]
twopair - 7%
outcards = [
    d
    r
    t
]]

list = [
    a
    b
    c
    d
    r
    t
]




outs = [
    2h,
    3h,
    
    

]

3% * 5% 
3 suited cards on flop
need 2 suited cards from the last 2 cards
on card 4, # outs #suited cards left/45
on card 5, 


3 6s
3 5s

7%, 7%

14%
P(6 on 4 and not on 5) +


5h 6h

kS AC

3H  8H  2S    1 pair     cards = []6 6s
3H  8H  2S    flush 

What combinations conincide???



(3/45) + ((3/44)*(1-(3/45))) "hit 6 on 4 and not 5, hit 6 on not 4 but on 5, and hit 6 on 4 and 5" 
0.1303

3 6's left and 45 remaining cards
3/45 * 42/44 + 42/45 * 3/44 + 3/45 * 2/44 = 0.1303 !!! includes trips !!!
3/45 * 42/44 + 42/45 * 3/44 % chance of 1 pair



The term (1-(outs/45)) indicated the chance that you didn't hit on the turn. Because if you did, then you wouldn't need the river card, would you.


 ((1/remainingCardsCount) * (remainingCardsCount - 1/remainingCardsCount-1)) * 2


 52
 5c
 1/52

 45
 5c
 1/44

 5c

P(getting a specific card) = P(hit on turn) + P(hit on river)
                            1/rcc + ((rcc-1)/rcc) * (1/(rcc-1))
                            
                            
                            1/45 + 44/45 * 1/44






"onePair"   : [hand,hand hand]
"twoPair"   : [hand,hand hand]



hand: [5d,     5c]( 1/rcc * rcc-1-rvc/rcc-1 * 2 )

hand: [5d,     5s]( 1/rcc * rcc-1-rvc/rcc-1 * 2 )

hand: [5d,     5h]( 1/rcc * rcc-1-rvc/rcc-1 * 2 )

[6h, 5d]

[5d,5c]     outs: [5c]
[5d,5h]     outs: [5h]
[5d,5s]     outs: [5s]
[6h,6c]     outs: [6c]
[6h,6s]     outs: [6s]
[6h,6d]     outs: [6d]


1/48 * 45/47 * 44/46 * 43/45 * 42/44 * 5 = 0.087 per suit of same valued card
45/48 * 1/47 * 44/46 * 43/45 * 42/44

general formula pre flop probabilties

n = number of players
rcc = 52 - 2n

1/rcc * rcc-3/rcc-1 * rcc-4/rcc-2 * rcc-5/rcc-3 * rcc-6/rcc-4



2 5
outs: [5c]

1/45 * 42/44 + 42/45 * 1/44


!!!one pair only!!!!
( 1/rcc * rcc-1-rvc/rcc-1 * 2 )
!!!one pair only!!!!

1 pair before flop
2 players
remaing cards = 48
P1 cards: 5D, 6D
P2 cards: does not have a 5
P(hitting 1 pair of 5's in the game)
1/48 * 45/47 * 44/46 * 43/45 * 42/44 


Trips:

P1: 5c ?
P2: ?  ?

Outs: 5 H D S 3C2 = 3!/2!(3-2)! = 3!/2! = 6/2 = 3 
5H, 5D
5D, 5H
5H, 5S
5S, 5H
5D, 5S
5S, 5D


Table
?  ?  ?  X  X

1/45 * 1/44 * 6 = P(hit trips on last 2 cards)

Table 
X  X  X  X  X

xCy = x!/(y!(x-y)!)
2c2 = 2!/2! = 1 x 2 = 2

5c2 = 5!/2!3! = 10 = 20

1/48 * 1/47 * 45/46 * 44/45 * 43/44  * 20 = P(hit trips in the game with 5H and 5D given we have 5c) = 0.00828707 = 0.828% * 3 = 2.5% 



 Two pair anal-ysis:

 p1 5h 8s

 T 3c 10d 4h ? ?

 if no cards in flop give you pair, 
 then you have to hit both of your hand cards on the turn and river

 one pair in your hand: look for the possible one pairs you could get on the table



 two one pairs from cards in hand: (eg. T = [5c, 8c, 3c, 10D, 12h])

 twoPair: [5H,5C,8S,8H]
 twoPair: [5H,5C,8S,8C]
 twoPair: [5H,5C,8S,8D]

 twoPair: [5H,5D,8S,8H]
 twoPair: [5H,5D,8S,8C]
 twoPair: [5H,5D,8S,8D]

 twoPair: [5H,5S,8S,8H]
 twoPair: [5H,5S,8S,8C]
 twoPair: [5H,5S,8S,8D]


 single one pair from hand and single one pair from table:  (eg. T = [5c, 3c, 3s, 10D, 12h])


 twoPair: [2H,2S:3H,3C]
 twoPair: [2H,2S:3H,3S]
 twoPair: [2H,2S:3H,3D]

 twoPair: [2H,2S:3D,3C]
 twoPair: [2H,2S:3D,3S]
 twoPair: [2H,2S:3D,3H]




 twoPair: [2H,2S:3D,3H
 twoPair: [2H,2S:3D,3C

 twoPair: [2H,2S:3S,3D
 twoPair: [2H,2S:3S,3H
 twoPair: [2H,2S:3S,3C


 twoPair: [5H,5S,2c,2h]
 twoPair: [5H,5S,2c,2d]

 twoPair: [5H,5S,2d,2h]
 twoPair: [5H,5S,2d,2h]
 twoPair: [5H,5S,2d,2h]

 twoPair: [5H,5S, 2s ,52*52]
 twoPair: [5H,5S, 2h ,52*52]
 twoPair: [5H,5S, 2d- 2 ,52*52]
 twoPair: [5H,5S, 52 - 2 ,52*52]
 twoPair: [5H,5S, 52 - 2 ,52*52]
 twoPair: [5H,5S, 52 - 2 ,52*52]

 twoPair: [5H,5C,52,52]
 twoPair: [5H,5D,52,52]

 twoPair: [8S,8H,52,52]
 twoPair: [8S,8D,52,52]
 twoPair: [8S,8C,52,52]

13  3  12  3
13*12*3*3 = 1404
1404/22464 = 6.25%
3 5's 3 8's
3/48 * 3/47 * 42/46 * 41/45 * 40/44 * 20 =6.034% 

 we are going to need this
 math.comb(n, k)¶
 Return the number of ways to choose k items from n items without repetition and without order.
 Evaluates to n! / (k! * (n - k)!) when k <= n and evaluates to zero when k > n.
 math.comb(n, k) = n! / (k! * (n-  k)!)